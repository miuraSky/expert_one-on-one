# Architectural Building Blocks
    Three core building blocks:
    . Business Services layer: This is central to successful applications.
    . Presentation layer:  Tis may be a UI or a remoting facade.
    . Data access layer: Objects accessing a persistence store-usually, one or more relational databases.

# The Business Services Layer
    The key to a sound architecture is a well-defined service layer.THis is a layer that exposes business logic to
    clients such as web or other user interfaces or a remoting layers.It will consist of multiple interfaces, each
    with a well-defined contract.

    In the light of our goals, a well-defined service layer should:
        > Be Complete.It should expose all operations that clients will need.It may need to expose distinct interfaces
         that support the needs of different clients.
        > Be Simple.Its complexity should be only that warranted by the complexity of business requirements concerned.
         Its mechanics shouldn't impose great complexity.

# Be Stateless
    Design applications to use a stateless service layer.Hold state in the web ier, rather than in the business logic
    tier.

# Popular Service Layers
    > Remote Interfaces
    > local Interfaces
    > SPI(Service Provider Interfaces)

# MVC Web Actions
    Do not put business logic int the web tier,in Struts Actions,or the like.Business logic should be independent of
    presentation

# Service Layer Running in a Lightweight Container
    Essentially, a lightweight container will:
    > Manage the lifecycle of business objects: Only POJOs.
    > Provide a lookup facility,resolving dependencies managed objects my have on collaborators as managed by the light
      container: Inversion of Control(IoC)
    > Declarative transaction managements: Aspect Orient Programing(AOP)

# The Importance of Logical Separation
    A web interface should be thin.It should be build on the service layer and contain only code to interpret user
    gestures and display the response.

# "Lightweight Container" VS "EJB Container"